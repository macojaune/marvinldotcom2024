---
import { db, Vote} from "astro:db";
import { VoteResults } from "./ProjectComparison";
import ProjectCard from "./ProjectCard";

const { projects: initialProjects } = Astro.props;

let projects = initialProjects;
let currentPair = [1, 2];
let votingHistory: number[] = [];
let votingComplete = false;
let comparedPairs = new Set();

const vote = async (projectId: number) => {
//   await db.insert(Vote).values({ projectId, vote: 1, createdAt: new Date() });
  votingHistory = [...votingHistory, projectId];
  moveToNextPair(projectId);
};

const moveToNextPair = (selectedProjectId:number) => {
  const currentIndex = projects.findIndex((p) => p.id === selectedProjectId);
  let nextIndex = (currentIndex + 1) % projects.length;

  while (nextIndex !== currentIndex) {
    const pairKey = [selectedProjectId, projects[nextIndex].id]
      .sort()
      .join("-");
    if (!comparedPairs.has(pairKey)) {
      currentPair = [selectedProjectId, projects[nextIndex].id];
      comparedPairs.add(pairKey);
      return;
    }
    nextIndex = (nextIndex + 1) % projects.length;
  }

  votingComplete = true;
};

const restartVoting = () => {
  const shuffledProjects = shuffleArray([...initialProjects]);
  projects = shuffledProjects;
  currentPair = [shuffledProjects[0].id, shuffledProjects[1].id];
  votingHistory = [];
  comparedPairs = new Set();
  votingComplete = false;
};

const shuffleArray = (array) => {
  for (let i = array.length - 1; i > 0; i--) {
    const j = Math.floor(Math.random() * (i + 1));
    [array[i], array[j]] = [array[j], array[i]];
  }
  return array;
};

const voteCount = projects
  .map((project) => ({
    ...project,
    votes: votingHistory.filter((id) => id === project.id).length,
  }))
  .sort((a, b) => b.votes - a.votes);

const project1 = projects.find((p) => p.id === currentPair[0]);
const project2 = projects.find((p) => p.id === currentPair[1]);
---

{
  !votingComplete ? (
    <div class="mx-auto my-4 max-w-4xl p-4">
      <h2 class="mb-4 text-2xl font-bold dark:text-d/primary">
        Vote pour le prochain projet
      </h2>
      <p class="mb-4 text-d/primary">
        Une fois celui en cours lancé, on enchaine sur celui que vous aurez
        sélectionné:
      </p>
      <div class="mb-8 flex items-center justify-between space-x-4">
        <ProjectCard project={project1} onVote={vote}  />
        <div class="text-2xl font-bold dark:text-d/primary">vs.</div>
        <ProjectCard project={project2} onVote={vote}  />
      </div>
      <p class="text-center text-sm dark:text-d/primary">
        Vote {comparedPairs.size + 1} sur{" "}
        {(projects.length * (projects.length - 1)) / 2}
      </p>
    </div>
  ) : (
    <VoteResults projects={voteCount} client:load />
  )
}
