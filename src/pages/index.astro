---
import Layout from "../layouts/Layout.astro";
import Header from "../components/Header.astro";
import Footer from "../components/Footer.astro";
import SectionTitle from "../components/SectionTitle.astro";
import { persona } from "../persona";
import List from "../components/List.astro";
import ListItem from "../components/ListItem.astro";
import Section from "../components/Section.astro";
import Story from "../components/Story.astro";
import { getCollection } from "astro:content";
import Link from "../components/Link.astro";
import { sort } from "radash";
// Resolve an array of references
const projects = await getCollection("project", ({ data }) =>
  import.meta.env.PROD ? data.isDraft !== true : true,
);
const articles = await getCollection("blog", ({ data }) =>
  import.meta.env.PROD ? data.isDraft !== true : true,
);
const sortedProjects = sort(projects, (p) => p.data.createdAt, true);
const sortedArticles = sort(articles, (p) => p.data.createdAt, true);
---

<Layout title={persona.seo.title} desc={persona.seo.description}>
  <Header title={persona.firstName} description={persona.description} />
  <Story />
  {
    projects ? (
      <Section>
        <SectionTitle As="h2" title="Mes derniers Projets" />
        <List>
          {sortedProjects
            .slice(0, 5)
            .map(({ data: { title, description, createdAt }, slug }) => (
              <ListItem
                title={title}
                desc={description}
                url={"/projets/" + slug}
                date={createdAt}
              />
            ))}
          {projects.length - 5 > 0 && (
            <p class="mt-2 w-full text-center text-sm">
              <Link url="/projets" title="Projets">
                {projects.length - 5} autre{projects.length - 5 > 1 ? "s" : ""}
                projet{projects.length - 5 > 1 ? "s" : ""}
                <svg
                  xmlns="http://www.w3.org/2000/svg"
                  viewBox="0 0 16 16"
                  fill="currentColor"
                  class="h-4 w-4"
                  slot="after"
                >
                  <path
                    fill-rule="evenodd"
                    d="M2 8c0 .414.336.75.75.75h8.69l-1.22 1.22a.75.75 0 1 0 1.06 1.06l2.5-2.5a.75.75 0 0 0 0-1.06l-2.5-2.5a.75.75 0 1 0-1.06 1.06l1.22 1.22H2.75A.75.75 0 0 0 2 8Z"
                    clip-rule="evenodd"
                  />
                </svg>
              </Link>
            </p>
          )}
        </List>
      </Section>
    ) : null
  }
  {
    articles.length > 0 ? (
      <Section>
        <SectionTitle As="h2" title="Mes Réflexions récentes" />
        <List>
          {sortedArticles.map(({ data, slug }) => (
            <ListItem
              title={data.title}
              desc={data.description}
              url={"/blog/" + slug}
            />
          ))}
          {articles.length - 3 > 0 && (
            <p class="mt-2 w-full text-center text-sm">
              <Link url="/blog" title="Blog">
                {articles.length - 3} autre{articles.length - 3 > 1 ? "s" : ""}
                article{articles.length - 3 > 1 ? "s" : ""}
                <svg
                  xmlns="http://www.w3.org/2000/svg"
                  viewBox="0 0 16 16"
                  fill="currentColor"
                  class="h-4 w-4"
                  slot="after"
                >
                  <path
                    fill-rule="evenodd"
                    d="M2 8c0 .414.336.75.75.75h8.69l-1.22 1.22a.75.75 0 1 0 1.06 1.06l2.5-2.5a.75.75 0 0 0 0-1.06l-2.5-2.5a.75.75 0 1 0-1.06 1.06l1.22 1.22H2.75A.75.75 0 0 0 2 8Z"
                    clip-rule="evenodd"
                  />
                </svg>
              </Link>
            </p>
          )}
        </List>
      </Section>
    ) : null
  }
  <Footer />
  
</Layout>
